import wave
import numpy as np
import librosa
from pydub import AudioSegment
from pydub.playback import play

song = AudioSegment.from_wav("output.wav")

ten_seconds = 10 * 1000

first_10_seconds = song[:ten_seconds]

last_5_seconds = song[-4000:]
# boost volume by 6dB
beginning = first_10_seconds + 6

# reduce volume by 3dB
end = last_5_seconds - 3
#тут конец соединяется с началом(змейка) и играет 15.0 сек
without_the_middle = beginning + end

without_the_middle.duration_seconds == 15.0

# song is not modified
backwards = song.reverse()
# 1.5 second crossfade
with_style = beginning.append(end, crossfade=1500)
# repeat the clip twice
do_it_over = with_style * 2
# 2 sec fade in, 3 sec fade out
awesome = do_it_over.fade_in(2000).fade_out(3000)

awesome.export("mashup.mp3", format="mp3")
# сохранили в таком формате mp3 c названием mushup

###

sound = AudioSegment.from_file('output.wav', format="wav")

# shift the pitch up by half an octave (speed will increase proportionally)
octaves = 0.5

new_sample_rate = int(sound.frame_rate * (5.0 ** octaves))

# keep the same samples but tell the computer they ought to be played at the 
# new, higher sample rate. This file sounds like a chipmunk but has a weird sample rate.
hipitch_sound = sound._spawn(sound.raw_data, overrides={'frame_rate': new_sample_rate})

# now we just convert it to a common sample rate (44.1k - standard audio CD) to 
# make sure it works in regular audio players. Other than potentially losing audio quality (if
# you set it too low - 44.1k is plenty) this should now noticeable change how the audio sounds.
hipitch_sound = hipitch_sound.set_frame_rate(44100)

#Play pitch changed sound
play(hipitch_sound)

#save pitch changed sound
hipitch_sound.export("outout.wav", format="wav")
###

sound = AudioSegment.from_file("mashup.mp3", format="mp3")
